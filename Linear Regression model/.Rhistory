dataset= read.csv(file.choose())
dataset
View(dataset)
# Taking care of missing data
dataset$Age
dataset$Salary
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Age
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset$Salary
View(dataset)
str(dataset)
# Encoding categorical data
dataset$Country
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
str(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
dataset$Purchased
install.packages('caTools')
library(caTools)
set.seed(123)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
install.packages("caTools")
install.packages("caTools")
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
dataset= read.csv(file.choose())
dataset
View(dataset)
# Taking care of missing data
dataset$Maths
dataset$English
dataset$Maths = ifelse(is.na(dataset$Maths),
ave(dataset$Maths,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Maths)
dataset$Maths
dataset$English = ifelse(is.na(dataset$English),
ave(dataset$English,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$English)
dataset$English
View(dataset)
View(dataset)
# Encoding categorical data
dataset$Gender
dataset$Gender = factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 2))
dataset$Gender
str(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
training_set = scale(training_set)
test_set = scale(test_set)
##Scaling
##scaling will use the formula or/and standard deviation to scale the values
training_set[,2:3]
training_set[,2:3] = scale(training_set[,2:3])
test_set[,2:3] = scale(test_set[,2:3])
View(test_set)
# Simple Linear Regression
# Importing the dataset
dataset = read.csv(file.choose())
View(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
split
# Simple Linear Regression
# Importing the dataset
dataset = read.csv(file.choose())
View(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
summary(dataset)
# Fitting Simple Linear Regression to the Training set
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Training set
install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience,
y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = training_set$YearsExperience,
y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$YearsExperience,
y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of experience') +
ylab('Salary')
#Importing Libraries
library(missForest)
library(caTools)
library(sqldf)
# Question 1
easysales = read.csv(file.choose())
View(easysales)
# Task 1
ProductPrice<-sqldf("Select PRODUCTS,max(price) from easysales order by max(price) desc")
maxPriceProduct<-ProductPrice[1]
maxPriceProduct
# Task 2
E2=easysales
nrow(E2)                               # Total Rows in Dataset
nrow(E2[!complete.cases(E2),])         # Counting NA rows
E2=na.omit(E2)
nrow(E2)                               # Total Rows in Dataset will be less
nrow(E2[!complete.cases(E2),])         # checking NA rows
View(E2)
# Task 3
E3=easysales
View(E3)
nrow(E3!complete.cases(E3),])         # Checking for NA values
nrow(E3[!complete.cases(E3),])         # Checking for NA values
for(i in 1:ncol(E3))
{
E3[is.na(E3[,i]),i]=round(mean(E3[,i], na.rm = TRUE))
}
nrow(E3[!complete.cases(E3),])         # Check the NAs left
View(E3)                             # Viewing Dataset
# Task 4
E4=easydaysales
if(nrow(E4[!complete.cases(E4),])==0)
{
E4=E4
}else{
temp=missForest(E4)
E4=as.data.frame(temp[[1]])
}
# Task 4
E4<-easydaysales
# Task 4
E4<-easysales
if(nrow(E4[!complete.cases(E4),])==0)
{
E4=E4
}else{
temp=missForest(E4)
E4=as.data.frame(temp[[1]])
}
E4
# ============================================================================
# Question 2
lungcapdata = read.csv(file.choose())
View(lungcapdata)
# Task 1
L1=lungcapdata
View(L1)
if(nrow(L1[!complete.cases(L1),])==0)
{
L1=L1
}else{
temp=missForest(L1)
L1=as.data.frame(temp[[1]])
}
if(nrow(L1[!complete.cases(L1),])==0)
{
L1=L1
}else{
temp=missForest(L1)
L1=as.data.frame(temp[[1]])
}
L1
d
d
dataset= read.csv(file.choose())
dataset
dataset= read.csv(file.choose())
dataset
dataset= read.csv(file.choose())
dataset
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Age
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset$Salary
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set = scale(training_set)
test_set = scale(test_set)
##Scaling
##scaling will use the formula or/and standard deviation to scale the values
training_set[,2:3]
training_set[,2:3] = scale(training_set[,2:3])
test_set[,2:3] = scale(test_set[,2:3])
View(test_set)
View(training_set)
##Scaling
##scaling will use the formula or/and standard deviation to scale the values
training_set[,2:3]
View(L1)
# Task 1
L1<-lungcapdata
View(L1)
# Task 1
L1<-lungcapdata
# ============================================================================
# Question 2
lungcapdata = read.csv(file.choose())
# Task 1
L1<-lungcapdata
View(L1)
nrow(L1[!complete.cases(L1),])
nrow(L1$Age[!complete.cases(L1$Age),])
sum(is.na(L1$Age))
sum(is.na(L1$LungCap))
sum(is.na(L1$Age))
sum(is.na(L1$Height))
sum(is.na(L1$Smoke))
sum(is.na(L1$Gender))
sum(is.na(L1$Caesarean))
L1$Height = ifelse(is.na(L1$Height),
ave(L1$Height,
FUN = function(x) mean(x, na.rm = TRUE)),
L1$Height)
L1$Height
sum(is.na(L1$Height))
nrow(L1[!complete.cases(L1),])         # Counting NA rows
L1$Smoke
# Task 4
# Encoding categorical data
L1$Smoke <- factor(L1$Smoke,
levels = c('no', 'yes'),
labels = c(0,1))
L1$Smoke
L1$Gender <- factor(L1$Gender,
levels = c('male', 'female'),
labels = c(0,1))
L1$Gender
L1$Caesarean <- factor(L1$Caesarean,levels = c('no', 'yes'),labels = c(0,1))
L1$Caesarean
# Task 2
L1[,1:3]<-scale(L1[,1:3])
L1
# ============================================================================
# Question 2
lungcapdata = read.csv(file.choose())
View(lungcapdata)
# Task 1
L1<-lungcapdata
sum(is.na(L1$LungCap))
sum(is.na(L1$Age))
sum(is.na(L1$Height))
sum(is.na(L1$Smoke))
sum(is.na(L1$Gender))
sum(is.na(L1$Caesarean))
L1$Height = ifelse(is.na(L1$Height),ave(L1$Height,
FUN = function(x) mean(x, na.rm = TRUE)),L1$Height)
L1$Height
sum(is.na(L1$Height))
nrow(L1[!complete.cases(L1),])         # Counting NA rows
# Task 2
L2<-L1
L2[,1:3]<-scale(L2[,1:3])
L2
# Task 3
split = sample.split(L1, SplitRatio = 2/3)
split
training_set = subset(L1, split == TRUE)
test_set = subset(L1, split == FALSE)
View(training_set)
View(test_set)
# Task 4
# Encoding categorical data
L1$Smoke <- factor(L1$Smoke,levels = c('no', 'yes'),labels = c(0,1))
L1$Smoke
L1$Gender <- factor(L1$Gender,levels = c('male', 'female'),labels = c(0,1))
L1$Gender
L1$Caesarean <- factor(L1$Caesarean,levels = c('no', 'yes'),labels = c(0,1))
L1$Caesarean
maxPriceProduct
# Task 1
ProductPrice<-sqldf("Select PRODUCTS,max(price) from easysales order by max(price) desc")
# ===============================================================================
# Question 1
easysales = read.csv(file.choose())
View(easysales)
# Task 1
ProductPrice<-sqldf("Select PRODUCTS,max(price) from easysales order by max(price) desc")
maxPriceProduct<-ProductPrice[1]
maxPriceProduct
# Task 2
E2<-easysales
nrow(E2)                               # Total Rows in Dataset
nrow(E2[!complete.cases(E2),])         # Counting NA rows
E2<-na.omit(E2)
nrow(E2)                               # Total Rows in Dataset will be less
nrow(E2[!complete.cases(E2),])         # checking NA rows
E2
# Task 2
E2<-easysales
E2
nrow(E2)                               # Total Rows in Dataset
nrow(E2[!complete.cases(E2),])         # Counting NA rows
E2<-na.omit(E2)
nrow(E2)                               # Total Rows in Dataset will be less
nrow(E2[!complete.cases(E2),])         # checking NA rows
E2
E2                                     # after omiting NA rows
# Task 3
E3<-easysales
View(E3)
nrow(E3[!complete.cases(E3),])         # Checking for NA values
for(i in 1:ncol(E3))
{
E3[is.na(E3[,i]),i]=round(mean(E3[,i], na.rm = TRUE))
}
nrow(E3[!complete.cases(E3),])         # Check the NAs left
View(E3)                             # Viewing Dataset
E3                             # Viewing Dataset
# Task 4
E4<-easysales
if(nrow(E4[!complete.cases(E4),])==0)
{
E4=E4
}else{
temp=missForest(E4)
E4=as.data.frame(temp[[1]])
}
E4
if(nrow(E4[!complete.cases(E4),])==0)
{
E4=E4
}else{
temp=missForest(E4)
E4=as.data.frame(temp[[1]])
}
if(nrow(E4[!complete.cases(E4),])==0)
{
E4=E4
}else{
temp=missForest(E4)
E4=as.data.frame(temp[[1]])
}
E4
# Task 4
E4<-easysales
if(nrow(E4[!complete.cases(E4),])==0)
{
E4=E4
}else{
temp=missForest(E4)
E4=as.data.frame(temp[[1]])
}
E4
# Task 3
E3<-easysales
E3
# Task 3
E3<-easysales
E3             #Before using mean to replace NA value
nrow(E3[!complete.cases(E3),])         # Checking for NA values
for(i in 1:ncol(E3))
{
E3[is.na(E3[,i]),i]=round(mean(E3[,i], na.rm = TRUE))
}
nrow(E3[!complete.cases(E3),])         # Check the NAs left
E3                             # Viewing Dataset
# Task 1
L1<-lungcapdata
sum(is.na(L1$LungCap))    # checking for NA value in LungCap column
sum(is.na(L1$Age))        # checking for NA value in Age column
sum(is.na(L1$Height))     # checking for NA value in Height column
sum(is.na(L1$Smoke))      # checking for NA value in Smoke column
sum(is.na(L1$Gender))     # checking for NA value in Gender column
sum(is.na(L1$Caesarean))  # checking for NA value in Caesarean column
n
# Since only Height has NA values lets impute them using mean
L1$Height = ifelse(is.na(L1$Height),ave(L1$Height,
FUN = function(x) mean(x, na.rm = TRUE)),L1$Height)
L1$Height
sum(is.na(L1$Height))     # checking for NA value in Height column
nrow(L1[!complete.cases(L1),])         # Counting for number of NA rows
# Since only Height has NA values lets impute them using mean
L1$Height = ifelse(is.na(L1$Height),ave(L1$Height,
FUN = function(x) mean(x, na.rm = TRUE)),L1$Height)
sum(is.na(L1$Height))     # checking for NA value in Height column
nrow(L1[!complete.cases(L1),])         # Counting for number of NA rows
# Task 2
L2<-L1
L2[,1:3]<-scale(L2[,1:3])
L2
# Task 2
L2<-L1
L2[,1:3]<-scale(L2[,1:3])
head(L2)
# Task 3
split = sample.split(L1, SplitRatio = 2/3)
training_set = subset(L1, split == TRUE)
test_set = subset(L1, split == FALSE)
head(training_set)
head(test_set)
# Task 4
# Encoding categorical data
L1$Smoke <- factor(L1$Smoke,levels = c('no', 'yes'),labels = c(0,1))
L1$Gender <- factor(L1$Gender,levels = c('male', 'female'),labels = c(0,1))
L1$Caesarean <- factor(L1$Caesarean,levels = c('no', 'yes'),labels = c(0,1))
head(L1)
